<?php

/**
 * Gets all tweets posted on the calendar day of a given DateTime.
 *
 * @param \PDO $pdo The database connection object.
 * @param DateTime $tweetDate The date on which to search for tweets.
 * @return \SplFixedArray An array of tweet objects that match the date.
 * @throws \PDOException MySQL errors generated by the statement.
 **/
public static function getTweetsByTweetDate(\PDO $pdo, DateTime $tweetDate) : \SplFixedArray {

	// Create dates for midnight of the date and midnight of the next day.
	$startDateString = $tweetDate->format('Y-m-d') . ' 00:00:00';
	$startDate = new DateTime($startDateString);
	$endDate = new DateTime($startDateString);
	$endDate->add(new DateInterval('P1D'));

	// Create the query template.
	$query = "SELECT tweetId, tweetProfileId, tweetContent, tweetDate FROM tweet WHERE tweetDate >= :startDate AND tweetDate < :endDate";
	$statement = $pdo->prepare($query);

	// Bind the beginning and end dates to the place holder in the template.
	$parameters = [
		'startDate' => $startDate->format("Y-m-d H:i:s.u"),
		'endDate' => $endDate->format("Y-m-d H:i:s.u"),
	];
	$statement->execute($parameters);

	// Build an array of tweets from the returned rows.
	$tweets = new \SplFixedArray($statement->rowCount());
	$statement->setFetchMode(\PDO::FETCH_ASSOC);
	while(($row = $statement->fetch()) !== false) {
		try {
			$tweet = new Tweet($row["tweetId"], $row["tweetProfileId"], $row["tweetContent"], $row["tweetDate"]);
			$tweets[$tweets->key()] = $tweet;
			$tweets->next();
		} catch(\Exception $exception) {
			// If the row couldn't be converted, throw an exception.
			throw(new \PDOException($exception->getMessage(), 0, $exception));
		}
	}
	return($tweets);
}